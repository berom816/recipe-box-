//ocmponent, showing the ingredient list 
class IngredientList extends React.Component{
  constructor(){
    super();
    this.incomingChange = this.incomingChange.bind(this);
    this.renderInDiv = this.renderInDiv.bind(this);
    this.renderInput = this.renderInput.bind(this);
    this.deleteIngredient = this.deleteIngredient.bind(this);
  }
  
  //handle the ingredient that user type in
  incomingChange(e){        
    this.props.onHigherLevelChange(this.props.index2,this.props.passInIndex,e.target.value);
  }
  
  //handle deleting ingredient by invoking passed in functoin
  deleteIngredient(){
    this.props.removeIngredientRecipe(this.props.index2,this.props.passInIndex);
  }
  
  //display ingredient without user editing it
  renderInDiv(){
    return(
      <div className='individualIngredientDiv'>
        {this.props.passedValue}
      </div>
    )
  }
  
  //display ingredient in edit mode, allowing user to make change to the ingredient
  renderInput(){
    return(
      <div className='input-group'>
        <span className='input-group-btn'>
          <button className='btn btn-danger btn-md xButton' onClick={this.deleteIngredient}> X </button>
        </span>
        <input type='text' placeholder='Enter one ingredient' className='form-control' value={this.props.passedValue} onChange={this.incomingChange}/>
      </div>
    )
  }
  
  render(){
    if(this.props.onEditing){
      return this.renderInput();
    }
    else{
      return this.renderInDiv();
    }
  }
}

//component, hold each recipe 
class Recipe extends React.Component{
  constructor(){
    super();
    this.state={
      showIngredient:false,
      editing:false
    }    
    this.assembleIngredients = this.assembleIngredients.bind(this);
    this.handleDishNameChange = this.handleDishNameChange.bind(this);
    this.handleDishIngredientChange = this.handleDishIngredientChange.bind(this);
    this.renderDishTitle = this.renderDishTitle.bind(this);
    this.renderShowIngredient = this.renderShowIngredient.bind(this);
    this.toShowIngredient = this.toShowIngredient.bind(this);
    this.changeEdit = this.changeEdit.bind(this);
    this.renderButtons = this.renderButtons.bind(this);
    this.handleDeleteRecipe = this.handleDeleteRecipe.bind(this);
    this.handleAddIngredient = this.handleAddIngredient.bind(this);
  }
  
  //handle the recipe's name change by invoking passed in prop function
  handleDishNameChange(e){
    this.props.changeNameState(this.props.index, e.target.value);
  }
  
  //handle the ingredients change
  handleDishIngredientChange(indexFromLower, indexOfIngred, e){
    this.props.changeIngredientState(this.props.index, indexOfIngred, e);
  }
 
  //assembling each ingredient of the recipe, passing it down to ingredientList
  assembleIngredients(ingredientsIndiv,z){
    return(
      <IngredientList 
        index2={this.props.index} 
        passInIndex={z} 
        passedValue={ingredientsIndiv} 
        onHigherLevelChange={this.handleDishIngredientChange}
        onEditing={this.state.editing}
        removeIngredientRecipe={this.props.removeIngredient}/>
    )
  }
  
  //changes the state of showing ingredient or not
  toShowIngredient(){
    this.setState({
      showIngredient:!this.state.showIngredient
    });
  }
  
  //change whether in edit mode 
  changeEdit(){
    this.props.eraseEmptyIngredient();
    this.setState({
      editing:!this.state.editing
    });
  }
  
  //render just the dish title, not showing the ingredients
  renderDishTitle(){
    if(this.state.editing){
      return(
        <div className='dishTitle'>
          <input className='dishTitleInput' value={this.props.recipeName} onChange={this.handleDishNameChange}/>
        </div>
      )
    }
    else{
      return(
        <div className='dishTitle' onClick={this.toShowIngredient}>
          {this.props.recipeName}
        </div>
      )
    }
  }
  
  //handle deleting recipe by invoking removeRecipe
  handleDeleteRecipe(){
    this.props.removeRecipe(this.props.index);
  }
  
  //handle adding ingredients by invoking addIngredientProp
  handleAddIngredient(){
    this.props.addIngredientProp(this.props.index);
  }
  
  //render different button options to user depending on edit mode or not
  renderButtons(){
    if(this.state.editing){
      return(
        <div>
          <button className='btn btn-info btn-margin plusButton' onClick={this.handleAddIngredient}><i className='fa fa-plus'></i></button>
          <button className='btn btn-success btn-margin' onClick={this.changeEdit}>Save</button>
        </div>
      )
    }
    else{
      return(
        <div>
          <button className='btn btn-info btn-margin editButton' onClick={this.changeEdit}>Edit</button>
          <button className='btn btn-danger btn-margin' onClick={this.handleDeleteRecipe}>Delete</button>
        </div>
      )
    }
  }
  
  //show the ingredients
  renderShowIngredient(){
    return(
      <div>
        {this.renderDishTitle()}
        <p>Ingredients</p>
        {
          this.props.ingredients.map(this.assembleIngredients)
        }
        {this.renderButtons()}
      </div>
    )
  }
  
  render(){
    if(this.state.showIngredient){
      return this.renderShowIngredient();
    }
    else{
      return this.renderDishTitle();
    }
  }  
}

//component, controlls the whole board of recipes
class Board extends React.Component{
  constructor(){
    super();
    //check the user's browser local storage, as recipes users created will be saved in browser, and if exist, show those saved recipe
    if(localStorage.berom816_recipeList){
      this.state={
        //recipeList array, holding objects, each object holds property 'recipe' for recipe name and 'ingred', an array for the recipe ingredients
        recipeList:JSON.parse(localStorage.berom816_recipeList)
      }
    }else{
      //if never visited before, save to local storage an empty recipeList
      localStorage.berom816_recipeList = "[]";
      this.state={
        recipeList:[]
      }
    }
    
    this.forEachRecipe = this.forEachRecipe.bind(this);
    this.handleRecipeNameChange = this.handleRecipeNameChange.bind(this);
    this.handleIngredientChange = this.handleIngredientChange.bind(this);
    this.deleteRecipe = this.deleteRecipe.bind(this);
    this.addIngredient = this.addIngredient.bind(this);
    this.removeIndivIngredient = this.removeIndivIngredient.bind(this);
    this.addNewRecipe = this.addNewRecipe.bind(this);
    this.removeEmptyIngred = this.removeEmptyIngred.bind(this);
  }

  //handle the ingredient changes at appropriate place of recipeList array, update state to re-render and save to local storage
  handleIngredientChange(a,b,val){
    var arr = this.state.recipeList;
    arr[a].ingred[b] = val;
    localStorage.berom816_recipeList = JSON.stringify(this.state.recipeList);
    this.setState({
      recipeList:arr
    });
  }
  
  //handle the recipe name changes at appropriate place of recipeList array, update state to re-render and save to local storage
  handleRecipeNameChange(i,val){
    var arr = this.state.recipeList;
    arr[i].recipe = val;
    localStorage.berom816_recipeList = JSON.stringify(this.state.recipeList);
    this.setState({
      recipeList:arr
    });
  }
  
  //handle the delete of recipe at appropriate place of recipeList array, update state to re-render and save to local storage
  deleteRecipe(i){
    var arr = this.state.recipeList;
    arr.splice(i,1);
    localStorage.berom816_recipeList = JSON.stringify(this.state.recipeList);
    this.setState({
      recipeList:arr
    });
  }
  
  //handle the addition of recipe to recipeList array, update state to re-render and save to local storage
  addNewRecipe(){
    var arr = this.state.recipeList;
    var recipeObj = {};
    recipeObj.recipe = 'Recipe Name';
    recipeObj.ingred = [];
    arr.push(recipeObj);
    localStorage.berom816_recipeList = JSON.stringify(this.state.recipeList);
    this.setState({
      recipeList:arr
    });
  }
  
  //handle the addition of empty ingredient at appropriate place of recipeList array, update state to re-render and save to local storage
  addIngredient(indexOfRecipeName){
    var arr = this.state.recipeList;
    arr[indexOfRecipeName].ingred.push('');
    localStorage.berom816_recipeList = JSON.stringify(this.state.recipeList);
    this.setState({
      recipeList:arr
    });
  }
  
  //handle the delete of ingredient at appropriate place of recipeList array, update state to re-render and save to local storage
  removeIndivIngredient(indexOfRecipeName,indexOfIngredientArr){
    var arr = this.state.recipeList;
    arr[indexOfRecipeName].ingred.splice(indexOfIngredientArr,1);
    localStorage.berom816_recipeList = JSON.stringify(this.state.recipeList);
    this.setState({
      recipeList:arr
    });
  }
  
  //when user added empty ingredients, but remains empty when clicking save, the empty ingredients will be deleted
  //update state to re-render and save to local storage
  removeEmptyIngred(){
    var arr = this.state.recipeList;
    var holdIngred = [];
    for(var a = 0; a<arr.length; a++){
      for(var b = 0; b<arr[a].ingred.length; b++){
        if(arr[a].ingred[b]!==''){
          holdIngred.push(arr[a].ingred[b]);
        }
      }
      arr[a].ingred = holdIngred;
      holdIngred = [];
    }
    localStorage.berom816_recipeList = JSON.stringify(this.state.recipeList);
    this.setState({
      recipeList:arr
    });
  }
  
  //handle each recipe, passing it down to Recipe component
  forEachRecipe(keis,i){
    return( 
      <div className='recipeCard'>
        <Recipe 
          index={i} 
          recipeName={keis.recipe} 
          ingredients={keis.ingred} 
          changeNameState={this.handleRecipeNameChange} 
          changeIngredientState={this.handleIngredientChange}
          removeRecipe={this.deleteRecipe}
          addIngredientProp={this.addIngredient}
          removeIngredient={this.removeIndivIngredient}
          eraseEmptyIngredient={this.removeEmptyIngred}/>
      </div>
    )
  }
  
  render(){
    return( 
      <div className='app'>
        {
          this.state.recipeList.map(this.forEachRecipe)
        }
        <button className='btn btn-primary addRecipeBtn' onClick={this.addNewRecipe}>Add Recipe</button>
        <div className='message'>
          The recipes you create will be saved in your browser
        </div>
      </div>
    )
  }
}

ReactDOM.render(
    <Board/>,document.getElementById('root')
);
